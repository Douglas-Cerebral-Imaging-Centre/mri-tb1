#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([input_volume],[Nifti image to be smoothed])
# ARG_POSITIONAL_SINGLE([sigma],[Standard deviation of the gaussian smoothing kernel, in mm. Isotropic for now (scalar).])
# ARG_POSITIONAL_SINGLE([output_filename],[Nifti file to save the smoothed image (overwritten)])
# ARG_OPTIONAL_SINGLE([mask],[m],[Mask defining the area to be smoothed],[])
# ARG_OPTIONAL_BOOLEAN([correct_for_masking],[c],[Mask defining the area to be smoothed],[on])

# ARG_HELP([Smooth a nifti image with a gaussian kernel. Can take a mask as an additional input: the image will be masked prior to smoothing. If correct_for_masking is enabled, a spatially variable correction factor is computed by smoothing the mask, and the smoothed image is divided by this factor. This mimicks what is done within the hMRI toolbox (https://github.com/hMRI-group/hMRI-toolbox/blob/035b484889e212e16afeac686998d55f91a43152/hmri_create_b1map.m#L181)])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='mch'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_mask=
_arg_correct_for_masking="on"


print_help()
{
	printf '%s\n' "Smooth a nifti image with a gaussian kernel. Can take a mask as an additional input: the image will be masked prior to smoothing. If correct_for_masking is enabled, a spatially variable correction factor is computed by smoothing the mask, and the smoothed image is divided by this factor. This mimicks what is done within the hMRI toolbox (https://github.com/hMRI-group/hMRI-toolbox/blob/035b484889e212e16afeac686998d55f91a43152/hmri_create_b1map.m#L181)"
	printf 'Usage: %s [-m|--mask <arg>] [-c|--(no-)correct_for_masking] [-h|--help] <input_volume> <sigma> <output_filename>\n' "$0"
	printf '\t%s\n' "<input_volume>: Nifti image to be smoothed"
	printf '\t%s\n' "<sigma>: Standard deviation of the gaussian smoothing kernel, in mm. Isotropic for now (scalar)."
	printf '\t%s\n' "<output_filename>: Nifti file to save the smoothed image (overwritten)"
	printf '\t%s\n' "-m, --mask: Mask defining the area to be smoothed (no default)"
	printf '\t%s\n' "-c, --correct_for_masking, --no-correct_for_masking: Mask defining the area to be smoothed (on by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-m|--mask)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_mask="$2"
				shift
				;;
			--mask=*)
				_arg_mask="${_key##--mask=}"
				;;
			-m*)
				_arg_mask="${_key##-m}"
				;;
			-c|--no-correct_for_masking|--correct_for_masking)
				_arg_correct_for_masking="on"
				test "${1:0:5}" = "--no-" && _arg_correct_for_masking="off"
				;;
			-c*)
				_arg_correct_for_masking="on"
				_next="${_key##-c}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-c" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'input_volume', 'sigma' and 'output_filename'"
	test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_input_volume _arg_sigma _arg_output_filename "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash



#! /bin/bash
set -euo pipefail
IFS=$'\n\t'


if [ -z "${_arg_mask}" ]; then
  # Simply smooth if no mask is provided
  echo test
  SmoothImage 3 ${_arg_input_volume} ${_arg_sigma} ${_arg_output_filename} 1
  #fslmaths ${_arg_input_volume} -s ${_arg_sigma} ${_arg_output_filename} -odt input
else
  # Mask before smoothing if mask is provided
  ImageMath 3 ${_arg_output_filename} m ${_arg_input_volume} ${_arg_mask}
  SmoothImage 3 ${_arg_output_filename} ${_arg_sigma} ${_arg_output_filename} 1
  if [ ${_arg_correct_for_masking} = on ]; then
    # Save correction factor in a temporary file
    correction_factor_tmp_file=$(mktemp --tmpdir XXXX.nii.gz)
	SmoothImage 3 ${_arg_mask} ${_arg_sigma} ${correction_factor_tmp_file} 1
	# Apply correction factor
    ImageMath 3 ${_arg_output_filename} / ${_arg_output_filename} ${correction_factor_tmp_file}
	# Set to 0 outside the mask
	ImageMath 3 ${_arg_output_filename} m ${_arg_output_filename} ${_arg_mask}
	# Clean tmp files
	rm ${correction_factor_tmp_file}
  fi
fi

# ] <-- needed because of Argbash
